// src/main/pdfGenerator.js
// Utility to generate styled PDFs using pdfkit for HB Report
// Import this in ipc.js to register PDF generation handlers
// Reference: https://pdfkit.org/docs/getting_started.html (Latest as of March 28, 2025)

import PDFDocument from 'pdfkit';
import { writeFileSync } from 'fs';
import { resolve } from 'path';
import { fileURLToPath } from 'url';
import logger from './logger.js';

const __dirname = resolve(fileURLToPath(import.meta.url), '..');

/**
 * Generates a PDF report with the given data and saves it to the specified path.
 * @param {string} reportType - Type of report (e.g., 'buyout', 'forecasting')
 * @param {object} data - Data to populate the PDF
 * @param {string} outputPath - Path to save the PDF
 * @returns {Promise<string>} - Resolves with the output file path
 */
async function generatePDF(reportType, data, outputPath) {
  return new Promise((resolvePromise, reject) => {
    try {
      const doc = new PDFDocument({
        size: 'A4',
        margins: { top: 50, bottom: 50, left: 50, right: 50 },
      });

      // Pipe the PDF to a file
      const filePath = resolve(__dirname, '../../', outputPath || `reports/${reportType}_report_${Date.now()}.pdf`);
      const stream = doc.pipe(writeFileSync(filePath));

      // Header
      doc
        .fontSize(20)
        .fillColor('#003087') // HB Blue
        .text(`${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Report`, { align: 'center' })
        .moveDown(1);

      // Add company logo (assuming HB_Logo_Large.png is available)
      const logoPath = resolve(__dirname, '../renderer/assets/images/HB_Logo_Large.png');
      doc.image(logoPath, 50, 50, { width: 100 }).moveDown(2);

      // Table Header
      const tableTop = doc.y;
      const columnWidths = [150, 100, 100, 100];
      const headers = reportType === 'buyout' 
        ? ['Description', 'Amount', 'Status', 'Date']
        : ['Item', 'Value', 'Category', 'Notes']; // Adjust based on report type

      doc
        .fontSize(12)
        .fillColor('#ffffff')
        .rect(50, tableTop, 500, 20)
        .fill('#003087');
      headers.forEach((header, i) => {
        doc
          .fillColor('#ffffff')
          .text(header, 50 + columnWidths.slice(0, i).reduce((a, b) => a + b, 0), tableTop + 5, {
            width: columnWidths[i],
            align: 'center',
          });
      });

      // Table Rows
      let rowTop = tableTop + 20;
      const rowHeight = 20;
      data.slice(0, 20).forEach((item, index) => { // Limit to 20 rows for demo
        doc
          .fontSize(10)
          .fillColor('#000000')
          .rect(50, rowTop, 500, rowHeight)
          .fill(index % 2 === 0 ? '#f5f5f5' : '#ffffff');

        const rowData = reportType === 'buyout'
          ? [item.description || 'N/A', item.amount || 0, item.status || 'N/A', item.date || 'N/A']
          : [item.name || 'N/A', item.value || 0, item.category || 'N/A', item.notes || 'N/A'];

        rowData.forEach((cell, i) => {
          doc.text(
            String(cell),
            50 + columnWidths.slice(0, i).reduce((a, b) => a + b, 0),
            rowTop + 5,
            { width: columnWidths[i], align: 'left' }
          );
        });
        rowTop += rowHeight;
      });

      // Footer
      doc
        .moveTo(50, doc.page.height - 70)
        .lineTo(550, doc.page.height - 70)
        .stroke()
        .fontSize(10)
        .fillColor('#666666')
        .text(`Generated by HB Report on ${new Date().toLocaleDateString()}`, 50, doc.page.height - 60, {
          align: 'center',
          width: 500,
        });

      doc.end();
      stream.on('finish', () => {
        logger.info(`PDF generated successfully at ${filePath}`);
        resolvePromise(filePath);
      });
    } catch (error) {
      logger.error(`PDF generation failed: ${error.message}`, { stack: error.stack });
      reject(error);
    }
  });
}

export { generatePDF };